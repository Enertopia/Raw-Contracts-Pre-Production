// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol";

contract WaterCreditNFT is Initializable, ERC721URIStorageUpgradeable, AccessControlEnumerableUpgradeable, UUPSUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;
    using StringsUpgradeable for uint256;

    CountersUpgradeable.Counter private _tokenIds;
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant VERIFIER_ROLE = keccak256("VERIFIER_ROLE");
    bytes32 private _merkleRoot;
    string private _baseTokenURI;

    mapping(uint256 => string) private _tokenMetadataHashes; // Mapping for tokenID to metadata hash (for IPFS)

    event BaseURIChanged(string newBaseURI);
    event WaterCreditMinted(uint256 indexed tokenId, address recipient, string tokenURI, string metadataHash);
    event BatchMintCompleted(address recipient, uint256 startTokenId, uint256 endTokenId);
    event MerkleRootUpdated(bytes32 newMerkleRoot);
    event TokenURIUpdated(uint256 indexed tokenId, string newTokenURI);
    event MetadataUpdated(uint256 indexed tokenId, string newMetadataHash);

    function initialize(string memory name, string memory symbol, string memory baseTokenURI) public initializer {
        __ERC721URIStorage_init(name, symbol);
        __AccessControlEnumerable_init();
        __UUPSUpgradeable_init();
        __ReentrancyGuard_init();
        __Pausable_init();

        _baseTokenURI = baseTokenURI;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(UPGRADER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
        _setupRole(VERIFIER_ROLE, _msgSender());
    }

    function setBaseURI(string memory newBaseURI) public onlyRole(DEFAULT_ADMIN_ROLE) {
        _baseTokenURI = newBaseURI;
        emit BaseURIChanged(newBaseURI);
    }

    function mintWaterCredit(address recipient, string memory tokenURI, string memory metadataHash, bytes32[] calldata merkleProof) public whenNotPaused nonReentrant onlyRole(MINTER_ROLE) {
        bytes32 leaf = keccak256(abi.encodePacked(recipient, tokenURI, metadataHash));
        require(MerkleProofUpgradeable.verify(merkleProof, _merkleRoot, leaf), "Invalid proof.");

        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();
        _mint(recipient, newItemId);
        _setTokenURI(newItemId, tokenURI);
        _tokenMetadataHashes[newItemId] = metadataHash;

        emit WaterCreditMinted(newItemId, recipient, tokenURI, metadataHash);
    }

    function updateMetadataHash(uint256 tokenId, string memory newMetadataHash) public onlyRole(VERIFIER_ROLE) {
        require(_exists(tokenId), "ERC721Metadata: Metadata update of nonexistent token");
        _tokenMetadataHashes[tokenId] = newMetadataHash;
        emit MetadataUpdated(tokenId, newMetadataHash);
    }

    function getMetadataHash(uint256 tokenId) public view returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: Query for nonexistent token");
        return _tokenMetadataHashes[tokenId];
    }

    function setMerkleRoot(bytes32 merkleRoot) public onlyRole(DEFAULT_ADMIN_ROLE) {
        _merkleRoot = merkleRoot;
        emit MerkleRootUpdated(merkleRoot);
    }

    function pause() public onlyRole(PAUSER_ROLE) {
        _pause();
    }

    function unpause() public onlyRole(PAUSER_ROLE) {
        _unpause();
    }

    function _baseURI() internal view override returns (string memory) {
        return _baseTokenURI;
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}

    // Override functions if necessary, implement additional features or security measures as needed.

    // No further overrides or modifications needed for the current scope of functionality.
}
