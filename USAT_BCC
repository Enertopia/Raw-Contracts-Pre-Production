// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol";

/// @title Advanced Contract for Managing Blue Carbon Credits as NFTs
/// @dev Extends functionality for sustainability, transparency, and verifiability
contract AdvancedBlueCarbonCredits is Initializable, ERC721URIStorageUpgradeable, ERC721EnumerableUpgradeable, AccessControlEnumerableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable, PaymentSplitterUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    // State variables
    CountersUpgradeable.Counter private _tokenIdCounter;

    // Roles
    bytes32 public constant ROLE_ADMIN = DEFAULT_ADMIN_ROLE;
    bytes32 public constant ROLE_VERIFIER = keccak256("ROLE_VERIFIER");
    bytes32 public constant ROLE_MINTER = keccak256("ROLE_MINTER");
    bytes32 public constant ROLE_AUDITOR = keccak256("ROLE_AUDITOR");

    // Carbon Credit Metadata
    struct CarbonCreditMetadata {
        uint256 issuedDate;
        uint256 expirationDate;
        string projectIdentifier;
        bool verified;
    }

    // TokenID to Carbon Credit Metadata
    mapping(uint256 => CarbonCreditMetadata) private _carbonCreditsMetadata;

    // Events
    event BlueCarbonCreditMinted(uint256 indexed tokenId, address indexed recipient, string metadataURI, CarbonCreditMetadata metadata);
    event CarbonCreditVerified(uint256 indexed tokenId);
    event CarbonCreditUpdated(uint256 indexed tokenId, string newMetadataURI, CarbonCreditMetadata metadata);

    // Initialization function
    function initialize(string memory name, string memory symbol, address[] memory payees, uint256[] memory shares) public initializer {
        __ERC721_init(name, symbol);
        __ERC721URIStorage_init();
        __ERC721Enumerable_init();
        __AccessControlEnumerable_init();
        __ReentrancyGuard_init();
        __UUPSUpgradeable_init();
        __PaymentSplitter_init(payees, shares);

        _setupRole(ROLE_ADMIN, _msgSender());
        _setupRole(ROLE_VERIFIER, _msgSender());
        _setupRole(ROLE_MINTER, _msgSender());
        _setupRole(ROLE_AUDITOR, _msgSender());
    }

    // Minting function enhanced with metadata for blue carbon credits
    function mintBlueCarbonCredit(address recipient, string memory metadataURI, CarbonCreditMetadata memory metadata) public onlyRole(ROLE_MINTER) {
        _tokenIdCounter.increment();
        uint256 newItemId = _tokenIdCounter.current();

        _mint(recipient, newItemId);
        _setTokenURI(newItemId, metadataURI);
        _carbonCreditsMetadata[newItemId] = metadata;

        emit BlueCarbonCreditMinted(newItemId, recipient, metadataURI, metadata);
    }

    // Function to mark a carbon credit as verified
    function verifyCarbonCredit(uint256 tokenId) public onlyRole(ROLE_VERIFIER) {
        require(_exists(tokenId), "Carbon Credit does not exist");
        CarbonCreditMetadata storage metadata = _carbonCreditsMetadata[tokenId];
        metadata.verified = true;
        _carbonCreditsMetadata[tokenId] = metadata;

        emit CarbonCreditVerified(tokenId);
    }

    // Function to update carbon credit metadata
    function updateCarbonCreditMetadata(uint256 tokenId, string memory newMetadataURI, CarbonCreditMetadata memory newMetadata) public onlyRole(ROLE_AUDITOR) {
        require(_exists(tokenId), "Carbon Credit does not exist");
        _setTokenURI(tokenId, newMetadataURI);
        _carbonCreditsMetadata[tokenId] = newMetadata;

        emit CarbonCreditUpdated(tokenId, newMetadataURI, newMetadata);
    }

    // Override functions for compatibility and additional checks
    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721EnumerableUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId) public view override(ERC721URIStorageUpgradeable, ERC721EnumerableUpgradeable, AccessControlEnumerableUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(ROLE_ADMIN) {}

    function _burn(uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) {
        super._burn(tokenId);
        delete _carbonCreditsMetadata[tokenId];
    }

    function tokenURI(uint256 tokenId) public view override(ERC721URIStorageUpgradeable, ERC721Upgradeable) returns (string memory) {
        return super.tokenURI(tokenId);
    }

    // Additional functionality can be implemented as needed
}
