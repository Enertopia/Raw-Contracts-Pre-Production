// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol";

contract USATBlueCarbonCredits is Initializable, ERC721URIStorageUpgradeable, ERC721EnumerableUpgradeable, AccessControlEnumerableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    // State variables
    CountersUpgradeable.Counter private _tokenIdCounter;

    // Define roles
    bytes32 public constant ROLE_ADMIN = DEFAULT_ADMIN_ROLE;
    bytes32 public constant ROLE_VERIFIER = keccak256("ROLE_VERIFIER");
    bytes32 public constant ROLE_MINTER = keccak256("ROLE_MINTER");

    // Events
    event BlueCarbonCreditMinted(uint256 indexed tokenId, address indexed recipient, string metadataURI);
    event BlueCarbonMetadataUpdated(uint256 indexed tokenId, string prevMetadataURI, string newMetadataURI);

    function initialize(string memory name, string memory symbol) public initializer {
        __ERC721_init(name, symbol);
        __ERC721URIStorage_init();
        __ERC721Enumerable_init();
        __AccessControlEnumerable_init();
        __ReentrancyGuard_init();
        __UUPSUpgradeable_init();

        _setupRole(ROLE_ADMIN, _msgSender());
        _grantRole(ROLE_VERIFIER, _msgSender());
        _grantRole(ROLE_MINTER, _msgSender());
    }

    function mintBlueCarbonCredit(address recipient, string memory metadataURI) external onlyRole(ROLE_MINTER) {
        _tokenIdCounter.increment();
        uint256 newItemId = _tokenIdCounter.current();

        _mint(recipient, newItemId);
        _setTokenURI(newItemId, metadataURI);

        emit BlueCarbonCreditMinted(newItemId, recipient, metadataURI);
    }

    function updateBlueCarbonMetadata(uint256 tokenId, string memory newMetadataURI) external onlyRole(ROLE_VERIFIER) {
        require(_exists(tokenId), "USATBCC: URI set of nonexistent token");
        string memory prevMetadataURI = tokenURI(tokenId);
        _setTokenURI(tokenId, newMetadataURI);

        emit BlueCarbonMetadataUpdated(tokenId, prevMetadataURI, newMetadataURI);
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721EnumerableUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId) public view override(ERC721URIStorageUpgradeable, ERC721EnumerableUpgradeable, AccessControlEnumerableUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(ROLE_ADMIN) {
        require(ERC165CheckerUpgradeable.supportsInterface(newImplementation, type(IUUPSUpgradeable).interfaceId), "USATBCC: New implementation does not support IUUPSUpgradeable");
    }

    function _burn(uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId) public view override(ERC721URIStorageUpgradeable, ERC721Upgradeable) returns (string memory) {
        return super.tokenURI(tokenId);
    }
}

