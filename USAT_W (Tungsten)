// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol";

contract TungstenNFTUpgradeable is Initializable, ERC721URIStorageUpgradeable, AccessControlEnumerableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable, PaymentSplitterUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant WITHDRAWER_ROLE = keccak256("WITHDRAWER_ROLE");

    CountersUpgradeable.Counter private _tokenIdCounter;

    event TungstenNFTMinted(address indexed minter, uint256 indexed tokenId, string tokenURI);
    event MetadataUpdated(uint256 indexed tokenId, string newTokenURI);
    event Withdrawal(address indexed to, uint256 amount);

    // Constructor replacement for upgradeable contracts
    function initialize(string memory name, string memory symbol, address[] memory payees, uint256[] memory shares) public initializer {
        __ERC721URIStorage_init();
        __ERC721_init(name, symbol);
        __AccessControl_init();
        __Pausable_init();
        __ReentrancyGuard_init();
        __UUPSUpgradeable_init();
        __PaymentSplitter_init(payees, shares);

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(MINTER_ROLE, msg.sender);
        _setupRole(UPGRADER_ROLE, msg.sender);
        _setupRole(PAUSER_ROLE, msg.sender);
        _setupRole(WITHDRAWER_ROLE, msg.sender);
    }

    function mintTungstenNFT(address to, string memory tokenURI) public onlyRole(MINTER_ROLE) whenNotPaused nonReentrant {
        _tokenIdCounter.increment();
        uint256 newItemId = _tokenIdCounter.current();
        _mint(to, newItemId);
        _setTokenURI(newItemId, tokenURI);
        emit TungstenNFTMinted(to, newItemId, tokenURI);
    }

    function updateTokenURIBatch(uint256[] memory tokenIds, string[] memory newTokenURIs) public onlyRole(MINTER_ROLE) {
        require(tokenIds.length == newTokenURIs.length, "Mismatch between token IDs and URIs length");
        for (uint256 i = 0; i < tokenIds.length; i++) {
            require(_exists(tokenIds[i]), "TungstenNFT: URI update of nonexistent token");
            _setTokenURI(tokenIds[i], newTokenURIs[i]);
            emit MetadataUpdated(tokenIds[i], newTokenURIs[i]);
        }
    }

    function pause() public onlyRole(PAUSER_ROLE) {
        _pause();
    }

    function unpause() public onlyRole(PAUSER_ROLE) {
        _unpause();
    }

    function withdraw() public onlyRole(WITHDRAWER_ROLE) nonReentrant {
        uint256 balance = address(this).balance;
        require(balance > 0, "No funds available");
        (bool success, ) = msg.sender.call{value: balance}("");
        require(success, "Withdrawal failed");
        emit Withdrawal(msg.sender, balance);
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) whenNotPaused {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId) public view override(ERC721URIStorageUpgradeable, AccessControlEnumerableUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    function _burn(uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) {
        super._burn(tokenId);
    }
}
