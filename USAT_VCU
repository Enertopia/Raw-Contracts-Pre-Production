// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract USATVCUToken is Initializable, ERC721URIStorageUpgradeable, AccessControlEnumerableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant RETIRER_ROLE = keccak256("RETIRER_ROLE");

    CountersUpgradeable.Counter private _tokenIdCounter;

    struct CarbonCredit {
        uint256 amount;
        bool isRemoval;
        bool retired;
    }

    mapping(uint256 => CarbonCredit) private _carbonCredits;

    event CarbonCreditMinted(uint256 tokenId, uint256 amount, bool isRemoval, string tokenURI);
    event CarbonCreditRetired(uint256 tokenId);
    event MetadataUpdated(uint256 tokenId, string newTokenURI);

    function initialize(string memory name, string memory symbol) public initializer {
        __ERC721_init(name, symbol);
        __ERC721URIStorage_init();
        __AccessControl_init();
        __Pausable_init();
        __ReentrancyGuard_init();
        __UUPSUpgradeable_init();

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(MINTER_ROLE, msg.sender);
        _setupRole(UPGRADER_ROLE, msg.sender);
        _setupRole(PAUSER_ROLE, msg.sender);
        _setupRole(RETIRER_ROLE, msg.sender);
    }

    function mintCarbonCredit(address to, uint256 amount, bool isRemoval, string memory tokenURI) public onlyRole(MINTER_ROLE) whenNotPaused {
        require(amount > 0, "Amount must be greater than 0");
        _tokenIdCounter.increment();
        uint256 newItemId = _tokenIdCounter.current();
        _mint(to, newItemId);
        _setTokenURI(newItemId, tokenURI);
        _carbonCredits[newItemId] = CarbonCredit(amount, isRemoval, false);

        emit CarbonCreditMinted(newItemId, amount, isRemoval, tokenURI);
    }

    function retireCarbonCredit(uint256 tokenId) public nonReentrant {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "Caller is not owner nor approved");
        CarbonCredit storage credit = _carbonCredits[tokenId];
        require(!credit.retired, "Credit already retired");
        credit.retired = true;

        emit CarbonCreditRetired(tokenId);
    }

    function updateTokenURI(uint256 tokenId, string memory newTokenURI) public onlyRole(MINTER_ROLE) {
        require(_exists(tokenId), "URI update of nonexistent token");
        _setTokenURI(tokenId, newTokenURI);

        emit MetadataUpdated(tokenId, newTokenURI);
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) whenNotPaused {
        super._beforeTokenTransfer(from, to, tokenId);
        require(!_carbonCredits[tokenId].retired, "Retired credits cannot be transferred");
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}

    function getCarbonCreditDetails(uint256 tokenId) public view returns (CarbonCredit memory) {
        require(_exists(tokenId), "Query for nonexistent token");
        return _carbonCredits[tokenId];
    }

    function supportsInterface(bytes4 interfaceId) public view override(ERC721URIStorageUpgradeable, AccessControlEnumerableUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    function _burn(uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) {
        super._burn(tokenId);
        delete _carbonCredits[tokenId];
    }
}
