// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";

contract RefinedBECCSNFT is Initializable, ERC721URIStorageUpgradeable, OwnableUpgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable, PausableUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    CountersUpgradeable.Counter private _tokenIdCounter;
    string private _baseTokenURI;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    event TokenMinted(uint256 indexed tokenId, address indexed owner, string uri);
    event BaseURIUpdated(string newBaseURI);

    // Initialization function with baseTokenURI
    function initialize(string memory name, string memory symbol, string memory baseTokenURI) public initializer {
        __ERC721_init(name, symbol);
        __ERC721URIStorage_init();
        __Ownable_init();
        __AccessControlUpgradeable_init();
        __ReentrancyGuard_init();
        __UUPSUpgradeable_init();
        __Pausable_init();

        _baseTokenURI = baseTokenURI;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
    }

    // Mint a single NFT to a recipient
    function mintNFT(address recipient, string memory tokenURI) public onlyRole(MINTER_ROLE) nonReentrant whenNotPaused {
        _tokenIdCounter.increment();
        uint256 newItemId = _tokenIdCounter.current();
        _mint(recipient, newItemId);
        _setTokenURI(newItemId, tokenURI);
        emit TokenMinted(newItemId, recipient, tokenURI);
    }

    // Batch mint NFTs to multiple recipients
    function batchMintNFT(address[] calldata recipients, string[] calldata tokenURIs) external onlyRole(MINTER_ROLE) nonReentrant whenNotPaused {
        require(recipients.length == tokenURIs.length, "Recipients and URIs length mismatch");
        for (uint i = 0; i < recipients.length; i++) {
            mintNFT(recipients[i], tokenURIs[i]);
        }
    }

    // Update the base URI for all tokens
    function setBaseURI(string memory newBaseURI) public onlyOwner {
        _baseTokenURI = newBaseURI;
        emit BaseURIUpdated(newBaseURI);
    }

    // Override baseURI to return the set baseTokenURI
    function _baseURI() internal view override returns (string memory) {
        return _baseTokenURI;
    }

    // Pause the contract - stop minting and transfers
    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {
        _pause();
    }

    // Unpause the contract
    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {
        _unpause();
    }

    // Authorize contract upgrades
    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}

    // Ensure transfers are paused when the contract is paused
    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);
        require(!paused(), "Token transfer while paused");
    }

    // Supports interface check
    function supportsInterface(bytes4 interfaceId) public view override(ERC721Upgradeable, AccessControlUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }
}
