// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";

contract EnhancedCesiumNFT is Initializable, ERC721URIStorageUpgradeable, AccessControlEnumerableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    CountersUpgradeable.Counter private _tokenIdCounter;
    bytes32 public constant ROLE_MINTER = keccak256("ROLE_MINTER");
    bytes32 public constant ROLE_ADMIN = keccak256("ROLE_ADMIN");
    bytes32 public constant ROLE_METADATA_MANAGER = keccak256("ROLE_METADATA_MANAGER");

    // Custom events
    event MetadataUpdated(uint256 indexed tokenId, string newMetadataURI);
    event NFTMinted(address indexed recipient, uint256 tokenId, string metadataURI);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    function initialize(string memory name, string memory symbol) public initializer {
        __ERC721_init(name, symbol);
        __AccessControlEnumerable_init();
        __ReentrancyGuard_init();
        __UUPSUpgradeable_init();

        _setupRole(ROLE_ADMIN, _msgSender());
        _setRoleAdmin(ROLE_MINTER, ROLE_ADMIN);
        _setRoleAdmin(ROLE_METADATA_MANAGER, ROLE_ADMIN);

        // Granting initial roles
        _grantRole(ROLE_MINTER, _msgSender());
        _grantRole(ROLE_METADATA_MANAGER, _msgSender());
    }

    function mintNFT(address recipient, string memory metadataURI) public onlyRole(ROLE_MINTER) {
        require(bytes(metadataURI).length > 0, "EnhancedCesiumNFT: Metadata URI cannot be empty");
        _tokenIdCounter.increment();
        uint256 newItemId = _tokenIdCounter.current();
        _mint(recipient, newItemId);
        _setTokenURI(newItemId, metadataURI);
        emit NFTMinted(recipient, newItemId, metadataURI);
    }

    function updateMetadata(uint256 tokenId, string memory newMetadataURI) public onlyRole(ROLE_METADATA_MANAGER) {
        require(_exists(tokenId), "EnhancedCesiumNFT: URI update of nonexistent token");
        require(bytes(newMetadataURI).length > 0, "EnhancedCesiumNFT: New metadata URI cannot be empty");
        _setTokenURI(tokenId, newMetadataURI);
        emit MetadataUpdated(tokenId, newMetadataURI);
    }

    // Enhanced role management
    function grantRole(bytes32 role, address account) public override onlyRole(getRoleAdmin(role)) {
        super.grantRole(role, account);
        emit RoleGranted(role, account, _msgSender());
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(ROLE_ADMIN) {}

    // Ensuring compatibility with ERC721 and AccessControlEnumerable
    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721URIStorageUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId) public view override(ERC721URIStorageUpgradeable, AccessControlEnumerableUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    function tokenURI(uint256 tokenId) public view override(ERC721URIStorageUpgradeable) returns (string memory) {
        return super.tokenURI(tokenId);
    }

    // Custom functions for extended functionality (if necessary)
    // function customFunctionality(...) public { ... }
}

