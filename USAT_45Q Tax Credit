// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/finance/PaymentSplitterUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";

/// @title A contract for creating and managing 45Q Tax Credit NFTs and their fractionalization
contract TaxCreditNFT is Initializable, ERC721EnumerableUpgradeable, OwnableUpgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, PaymentSplitterUpgradeable, UUPSUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    // State variables
    CountersUpgradeable.Counter private _tokenIdCounter;
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant FRACTIONALIZER_ROLE = keccak256("FRACTIONALIZER_ROLE");

    mapping(uint256 => address) private _fractionalizedTokens;

    // Struct for Tax Credit metadata
    struct TaxCreditMetadata {
        uint256 amount;
        string jurisdiction;
        uint256 issueDate;
        uint256 expirationDate;
        string projectID;
    }

    mapping(uint256 => TaxCreditMetadata) private _taxCreditMetadata;

    // Events
    event TaxCreditNFTMinted(uint256 indexed tokenId, address indexed owner, TaxCreditMetadata metadata);
    event TaxCreditNFTFractionalized(uint256 indexed tokenId, address sharesTokenAddress, uint256 sharesAmount);
    event TaxCreditNFTDefractionalized(uint256 indexed tokenId);

    /// @notice Initializes the contract with setup for roles and base functionality
    function initialize(
        string memory name,
        string memory symbol,
        address[] memory payees,
        uint256[] memory shares_
    ) public initializer {
        __ERC721Enumerable_init();
        __ERC721_init(name, symbol);
        __Ownable_init();
        __AccessControl_init();
        __ReentrancyGuard_init();
        __PaymentSplitter_init(payees, shares_);
        __UUPSUpgradeable_init();

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(FRACTIONALIZER_ROLE, _msgSender());
    }

    /// @notice Mints a new Tax Credit NFT with specified metadata
    function mintTaxCreditNFT(
        address to,
        TaxCreditMetadata memory metadata
    ) public onlyRole(MINTER_ROLE) {
        _tokenIdCounter.increment();
        uint256 newItemId = _tokenIdCounter.current();

        _mint(to, newItemId);

        _taxCreditMetadata[newItemId] = metadata;

        emit TaxCreditNFTMinted(newItemId, to, metadata);
    }

    /// @notice Fractionalizes a Tax Credit NFT into ERC20 shares
    function fractionalizeTaxCreditNFT(uint256 tokenId, uint256 sharesAmount, string memory sharesName, string memory sharesSymbol) public onlyRole(FRACTIONALIZER_ROLE) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        require(_fractionalizedTokens[tokenId] == address(0), "Tax Credit NFT is already fractionalized");
        require(ownerOf(tokenId) == _msgSender(), "Caller is not the owner");

        ERC20Upgradeable sharesToken = new ERC20Upgradeable();
        sharesToken.initialize(sharesName, sharesSymbol);
        sharesToken.mint(_msgSender(), sharesAmount);

        _fractionalizedTokens[tokenId] = address(sharesToken);

        _transfer(_msgSender(), address(this), tokenId);

        emit TaxCreditNFTFractionalized(tokenId, address(sharesToken), sharesAmount);
    }

    /// @notice Defractionalizes a Tax Credit NFT, converting ERC20 shares back into an NFT
    function defractionalizeTaxCreditNFT(uint256 tokenId) public onlyRole(FRACTIONALIZER_ROLE) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        address sharesTokenAddress = _fractionalizedTokens[tokenId];
        require(sharesTokenAddress != address(0), "Tax Credit NFT is not fractionalized");

        ERC20Upgradeable sharesToken = ERC20Upgradeable(sharesTokenAddress);
        uint256 totalShares = sharesToken.totalSupply();

        require(sharesToken.balanceOf(_msgSender()) == totalShares, "Caller does not own all shares");

        sharesToken.burn(_msgSender(), totalShares);

        _transfer(address(this), _msgSender(), tokenId);

        _fractionalizedTokens[tokenId] = address(0);

        emit TaxCreditNFTDefractionalized(tokenId);
    }

    /// @notice Returns the metadata for a given Tax Credit NFT
    function getTaxCreditMetadata(uint256 tokenId) public view returns (TaxCreditMetadata memory) {
        require(_exists(tokenId), "ERC721Metadata: Query for nonexistent token");
        return _taxCreditMetadata[tokenId];
    }

    /// @notice Authorizes an upgrade to a new contract implementation
    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}

    // Additional helper functions and logic specific to tax credits can be implemented as needed
}
