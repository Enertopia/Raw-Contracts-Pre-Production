// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";

contract EnhancedCesiumNFT is Initializable, ERC721URIStorageUpgradeable, ERC721EnumerableUpgradeable, AccessControlEnumerableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {
    using CountersUpgradeable for CountersUpgradeable.Counter;

    CountersUpgradeable.Counter private _tokenIdCounter;

    bytes32 public constant ROLE_MINTER = keccak256("ROLE_MINTER");
    bytes32 public constant ROLE_METADATA_MANAGER = keccak256("ROLE_METADATA_MANAGER");

    event MetadataUpdated(uint256 indexed tokenId, string newMetadataURI);
    event NFTMinted(address indexed minter, uint256 indexed tokenId, string metadataURI);
    event NFTBatchMinted(address indexed minter, uint256[] tokenIds);

    function initialize(string memory name, string memory symbol) public initializer {
        __ERC721_init(name, symbol);
        __ERC721URIStorage_init();
        __ERC721Enumerable_init();
        __AccessControlEnumerable_init();
        __ReentrancyGuard_init();
        __UUPSUpgradeable_init();

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(ROLE_MINTER, _msgSender());
        _setupRole(ROLE_METADATA_MANAGER, _msgSender());
    }

    function mintNFT(address recipient, string memory metadataURI) public onlyRole(ROLE_MINTER) {
        _mintSingleNFT(recipient, metadataURI);
    }

    function batchMintNFT(address recipient, string[] calldata metadataURIs) public onlyRole(ROLE_MINTER) {
        require(metadataURIs.length > 0, "Must mint at least one NFT");
        uint256[] memory tokenIds = new uint256[](metadataURIs.length);

        for (uint256 i = 0; i < metadataURIs.length; i++) {
            tokenIds[i] = _mintSingleNFT(recipient, metadataURIs[i]);
        }

        emit NFTBatchMinted(_msgSender(), tokenIds);
    }

    function _mintSingleNFT(address recipient, string memory metadataURI) internal returns (uint256) {
        _tokenIdCounter.increment();
        uint256 newItemId = _tokenIdCounter.current();
        _mint(recipient, newItemId);
        _setTokenURI(newItemId, metadataURI);
        emit NFTMinted(recipient, newItemId, metadataURI);
        return newItemId;
    }

    function updateMetadata(uint256 tokenId, string memory newMetadataURI) public onlyRole(ROLE_METADATA_MANAGER) {
        require(_exists(tokenId), "URI update of nonexistent token");
        _setTokenURI(tokenId, newMetadataURI);
        emit MetadataUpdated(tokenId, newMetadataURI);
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId) public view override(ERC721Upgradeable, AccessControlEnumerableUpgradeable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}

    function _burn(uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId) public view override(ERC721URIStorageUpgradeable, ERC721Upgradeable) returns (string memory) {
        return super.tokenURI(tokenId);
    }
}
